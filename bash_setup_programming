#!/bin/bash

###############################################################
# KDE 4 DEVELOPMENT
#
# If you just want to setup your environment for kde4
# development, download this file and save it somewhere
# now put the following line (with the path pointing to
# your just downloaded file) into your ~/.bashrc:
#
# . ~/path/to/this/file
#
# Example (the leading # has to be ommitted of course!)
# . ~/.bash_setup_kde4_programming
###############################################################

function prepend {
    p=$(readlink -f $2)
    eval $1=\"$p\$\{$1:+':'\$$1\}\" && export $1
}
export -f prepend

export SRC_ROOT=$HOME/projects

export CS_PATHS=(
    ${CS_PATH[@]}
    $SRC_ROOT/src
    $SRC_ROOT/qt5
)

# Make
# set your common make flags here, so all scripts can benefit from them
# general rule-of-thumb for -j: #cpucores + 1
export MAKEFLAGS=" -j$(($(nproc)+1)) "

# Use makeobj instead of make, to automatically switch to the build dir.
# If you don't have makeobj, install the package named kdesdk-scripts or
# kdesdk, or check out kdesdk/scripts from svn.
alias make='makeobj'

# Make
# Tell many scripts how to switch from source dir to build dir:
# requires makeobj from kdesdk and replaces src with build
export SRC_TO_BUILD="s,/src/,/build/,"
export BUILD_TO_SRC="s,/build/,/src/,"
export OBJ_REPLACEMENT="$SRC_TO_BUILD"

# you might have to change the actual filename in the path below
# in my git repo the file is called kf5_setup.sh
# NOTE: it's important this lies in ~/.kde/env so it gets
# called at KDE startup. This makes compiled applications
# available via KRunner etc.
. ~/.bin/kf5_setup.sh

# A function to easily build the current directory of KDE.
#
# This builds only the sources in the current ~/{src,build}/ subdirectory.
# Usage: cs somewhere && cmakekde
# will build/rebuild the sources in ~/src/somewhere
function cmakekde {
        local srcFolder current switched fail
        switched=0
        # get srcFolder for current dir
        srcFolder=$(pwd | sed -e "$BUILD_TO_SRC")
        # we are in the src folder, change to build directory
        # Alternatively, we could just use makeobj in the commands below...
        current=$(pwd)
        if [ "$srcFolder" = "$current" ]; then
                cb
                switched=1
        fi
        fail=0

        if [ -z "$KF5" ]; then
            cmake "$srcFolder" -DCMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX \
                    -DCMAKE_BUILD_TYPE=debugfull \
                    -DKDE4_AUTH_POLICY_FILES_INSTALL_DIR=$KDEDIR/share/polkit-1/actions \
                    -DKDE4_BUILD_TESTS=ON || fail=1
        else
            cmake "$srcFolder" -DCMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX \
                '-DCMAKE_CXX_FLAGS:STRING=-pipe -DQT_STRICT_ITERATORS -DQURL_NO_CAST_FROM_STRING -DQT_NO_HTTP -DQT_NO_FTP -Wformat -Werror=format-security -Werror=return-type -Wno-variadic-macros ' \
                -DBUILD_TESTING=TRUE -DCMAKE_BUILD_TYPE:STRING=debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON || fail=1
        fi

        if [[ $fail == 1 ]]; then
          return 1
        fi

        make install

        if [ -z "$KF5" ]; then
            kbuildsycoca4
        else
            kbuildsycoca5
        fi

        if test $switched -eq 1; then
          cs
        fi
}
export -f cmakekde

# A function to easily change to the build directory.
# Usage: cb
#   will simply go to the build folder if you are currently in a src folder
#   Example:
#     $ pwd
#     /home/user/src/KDE/kdebase
#     $ cb && pwd
#     /home/user/build/KDE/kdebase
function cb {
        local dest
        if [[ "$(pwd)" == *"/build"* ]]; then
            return 0
        fi
        # substitute src dir with build dir
        dest=$(pwd | sed -e "$SRC_TO_BUILD")
        current=$(pwd)
        if [ "$dest" = "$current" ]; then
            echo "no build dir found for path $current."
            return 1
        fi
        if test ! -d "$dest"; then
                # build directory does not exist, create
                mkdir -p "$dest"
        fi
        cd "$dest"
}
export -f cb

# Change to the source directory.  Same as cb, except this
# switches to the source folder instead of the build folder.
# Usage: cs
#   will simply go to the source folder if you are currently in a build folder
#   Example:
#     $ pwd
#     /home/user/build/KDE/kdebase
#     $ cs && pwd
#     /home/user/src/KDE/kdebase
function cs {
        local dest current

        # command line argument
        if test -n "$1"; then
                cd "$SRC_ROOT/$1"
        else
                # substitute build dir with src dir
                dest=$(pwd | sed -e "$BUILD_TO_SRC")
                current=$(pwd)
                if [ "$dest" = "$current" ]; then
                        cd "$SRC_ROOT"
                else
                        cd "$dest"
                fi
        fi
}
export -f cs
# Add autocompletion to cs function
function _cs_scandir
{
        local base ext

        base=$1
        ext=$2
        if [ -d $base ]; then
                for d in `ls $base`; do
                        if [ -d $base/$d ]; then
                                dirs="$dirs $ext$d/"
                        fi
                done
        fi
}

function _cs()
{
        local cur dirs dir
        for dir in ${CS_PATHS[@]}; do
            _cs_scandir "$dir" "${dir/$SRC_ROOT\//}/"
        done

        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        COMPREPLY=( $(compgen -W "${dirs}" -- ${cur}) )
}

# Remove comment on next line to enable cs autocompletion
complete -F _cs cs

# see http://ftp.hu.freebsd.org/pub/linux/distributions/frugalware/frugalware-testing/t/functions.sh
function in_array
{
  local i
  needle=$1
  shift 1
  # array() undefined
  [ -z "$1" ] && return 1
  for i in $*
  do
    [ "$i" == "$needle" ] && return 0
  done
  return 1
}
export -f in_array

# see http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array
function join_array
{
    local IFS="$1";
    shift;
    echo "$*";
}
export -f join_array

# completion for kdetest
function _kdetest
{
  local tests;

  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  old_pwd=$(pwd)
  cb

  tests=$(listCTests ${COMP_WORDS[1]})

  if [[ "$prev" == "kdetest" || "$prev" == "--debug" ]]; then
    # completion of tests
    COMPREPLY=( $(compgen -W "${tests}" -- ${cur}) )
  elif in_array "$prev" $tests; then
    # completion of available functions
    COMPREPLY=( $(compgen -W "$(./$prev -functions 2>/dev/null | cut -f 1 -d \( )" -- ${cur}) )
  fi

  cd "$old_pwd"
}

# removes .shell from the end of each test file
function listCTests {
  local tests;
  tests=""

  tests=$(LANG=en_US.UTF-8 ctest -N -V | grep "Test command:" | egrep -o ' [^ ]+$' | xargs readlink -f | cut -c $(echo $(readlink -f $(pwd))"/" | wc -c)-)

  if [[ "$1" == "--debug" ]]; then
    # remove trailing .shell
    for t in $tests; do
      echo -n ${t/.shell/}" "
    done
    echo
  else
    echo $tests
  fi
}

export -f listCTests


alias kdetest="sh ~/.bin/kdetest.sh"
complete -F _kdetest kdetest

function add_env {
  local d="$(readlink -f $1)"

  if [[ ! -z "$d" && -d "$d" ]]; then
    prepend PATH $d/bin
    prepend LD_LIBRARY_PATH $d/lib
    if [ -d "$d/plugins/sqldrivers" ]; then
      prepend LD_LIBRARY_PATH "$d/plugins/sqldrivers/"
    fi
    prepend PKG_CONFIG_PATH "$d/lib/pkgconfig"
    prepend CMAKE_PREFIX_PATH "$d"
    prepend CMAKE_LIBRARY_PATH "$d/lib"
    prepend CMAKE_INCLUDE_PATH "$d/include"
    prepend QT_PLUGIN_PATH "$d/plugins"
    prepend QML2_IMPORT_PATH "$d/qml"
  fi
}

export -f add_env
